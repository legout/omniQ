---
title: "Configuration"
---

This section details the various methods for configuring OmniQ.

OmniQ provides multiple configuration methods:

-   Direct parameter initialization
-   Type-validated config objects using `msgspec.Struct`
-   Dictionary-based configuration
-   YAML file configuration
-   Environment variable overrides

## Settings and Environment Variables

OmniQ's settings can be configured through a `settings.py` file and overridden by environment variables. Environment variables should be prefixed with `OMNIQ_`. For example, a setting `BASE_DIR` can be overridden by the environment variable `OMNIQ_BASE_DIR`.

### Example

Here is an example of how to define settings and use environment variables for overrides.

```python
# settings.py
BASE_DIR = "default/path"
PROJECT_NAME = "default"
```

```python
# env.py
import os
from .settings import BASE_DIR, PROJECT_NAME

base_dir = os.environ.get("OMNIQ_BASE_DIR", BASE_DIR)
project_name = os.environ.get("OMNIQ_PROJECT_NAME", PROJECT_NAME)
```

### Configuration Variables

The following table lists the available settings and their corresponding environment variables.

| Setting | Environment Variable | Description |
|---|---|---|
| `LOG_LEVEL` | `OMNIQ_LOG_LEVEL` | Set library logging level (DEBUG, INFO, WARNING, ERROR, DISABLED) |
| `DISABLE_LOGGING` | `OMNIQ_DISABLE_LOGGING`| Disable all library logging when set to "1" or "true" |
| `TASK_QUEUE_TYPE` | `OMNIQ_TASK_QUEUE_TYPE`| Queue backend for tasks (file, memory, sqlite, postgres, redis, nats) |
| `TASK_QUEUE_URL` | `OMNIQ_TASK_QUEUE_URL` | Connection string for task queue backend |
| `RESULT_STORAGE_TYPE`| `OMNIQ_RESULT_STORAGE_TYPE`| Storage backend for results (file, memory, sqlite, postgres, redis, nats) |
| `RESULT_STORAGE_URL`| `OMNIQ_RESULT_STORAGE_URL`| Connection string for result storage backend |
| `EVENT_STORAGE_TYPE`| `OMNIQ_EVENT_STORAGE_TYPE`| Storage backend for events (sqlite, postgres, file) |
| `EVENT_STORAGE_URL` | `OMNIQ_EVENT_STORAGE_URL`| Connection string for event storage backend |
| `FSSPEC_URI` | `OMNIQ_FSSPEC_URI` | URI for fsspec (e.g., "file:///path", "s3://bucket", "memory://") |
| `DEFAULT_WORKER` | `OMNIQ_DEFAULT_WORKER`| Default worker type (async, thread, process, gevent) |
| `MAX_WORKERS` | `OMNIQ_MAX_WORKERS` | Maximum number of workers |
| `THREAD_WORKERS` | `OMNIQ_THREAD_WORKERS` | Thread pool size |
| `PROCESS_WORKERS` | `OMNIQ_PROCESS_WORKERS`| Process pool size |
| `GEVENT_WORKERS` | `OMNIQ_GEVENT_WORKERS` | Gevent pool size |
| `TASK_TIMEOUT` | `OMNIQ_TASK_TIMEOUT` | Default task execution timeout in seconds |
| `TASK_TTL` | `OMNIQ_TASK_TTL` | Default time-to-live for tasks in seconds |
| `RETRY_ATTEMPTS` | `OMNIQ_RETRY_ATTEMPTS`| Default number of retry attempts |
| `RETRY_DELAY` | `OMNIQ_RETRY_DELAY` | Default delay between retries in seconds |
| `RESULT_TTL` | `OMNIQ_RESULT_TTL` | Default time-to-live for task results in seconds |
| `COMPONENT_LOG_LEVELS`| `OMNIQ_COMPONENT_LOG_LEVELS`| JSON string with per-component logging levels |

## Component Configuration

Components in OmniQ are configured using `msgspec.Struct` for type-validated configuration. This allows for flexible initialization from various sources.

### Initialization Methods

You can initialize components using the following methods:

-   **Direct Parameters:** Pass configuration values as keyword arguments to the component's constructor.
-   **Config Objects:** Use a `msgspec.Struct` object to define the configuration.
-   **Dictionaries:** Provide a dictionary containing the configuration parameters.
-   **YAML Files:** Load the configuration from a YAML file.

### Example Implementation

The following code demonstrates the class methods used to load configurations. For more information, see [`loader.py`](src/omniq/config/loader.py:1).

```python
import msgspec
from omniq.config.loader import load_yaml_config

class MyComponentConfig(msgspec.Struct):
    param1: str
    param2: int

class MyComponent:
    def __init__(self, param1: str, param2: int):
        self.param1 = param1
        self.param2 = param2

    @classmethod
    def from_config(cls, config: MyComponentConfig):
        """Create instance from config object"""
        return cls(param1=config.param1, param2=config.param2)

    @classmethod
    def from_dict(cls, config_dict: dict):
        """Create instance from dictionary"""
        config = MyComponentConfig(**config_dict)
        return cls.from_config(config)

    @classmethod
    def from_config_file(cls, config_path: str):
        """Create instance from config file"""
        config_dict = load_yaml_config(config_path)
        return cls.from_dict(config_dict)